// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Core__Int = require("../src/Core__Int.bs.js");
var IntlTests = require("./intl/IntlTests.bs.js");
var Core__Dict = require("../src/Core__Dict.bs.js");
var Core__JSON = require("../src/Core__JSON.bs.js");
var Caml_bigint = require("rescript/lib/js/caml_bigint.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Core__Array = require("../src/Core__Array.bs.js");
var Core__Float = require("../src/Core__Float.bs.js");
var Core__BigInt = require("../src/Core__BigInt.bs.js");
var Core__Option = require("../src/Core__Option.bs.js");

console.info("");

console.info("Array");

console.info("---");

var array = [
  1,
  2,
  3,
  4
];

console.info(Core__Array.reduce(array.map(function (x) {
              return (x << 1);
            }), 0, (function (a, b) {
            return a + b | 0;
          })));

console.info(typeof array);

console.info("");

console.info("Date");

console.info("---");

var date = new Date(Date.UTC(2020, 11));

console.log(date.toUTCString());

console.info("");

console.info("Dict");

console.info("---");

var dict = {};

dict["foo"] = "bar";

var dict2 = Object.assign({}, dict);

Core__Dict.$$delete(dict2, "foo");

console.log(dict, dict2);

console.info("");

console.info("Error");

console.info("---");

function f() {
  var error = new Error("hello");
  var typeError = new TypeError("error");
  var g = function () {
    throw error;
  };
  var h = function () {
    throw typeError;
  };
  return [
          g,
          h
        ];
}

console.info("");

console.info("Float/Int");

console.info("---");

console.log((10.2).toFixed(2));

console.log((10).toFixed(2));

console.log(Core__Int.fromString("0", undefined));

console.log(Core__Float.fromString("0.1"));

console.info("");

console.info("JSON");

console.info("---");

var json = JSON.parse("{\"foo\": \"bar\"}");

var json$1 = Core__JSON.Classify.classify(json);

var tmp;

if (typeof json$1 !== "object" || json$1.TAG !== "Object") {
  tmp = undefined;
} else {
  var value = Core__JSON.Classify.classify(json$1._0["foo"]);
  tmp = typeof value !== "object" || value.TAG !== "String" ? undefined : value._0;
}

console.log(tmp);

console.info("");

console.info("Map");

console.info("---");

var map = new Map();

map.set(1, 1);

map.set(2, 2);

map.delete(1);

console.log(map);

console.info("");

console.info("Math");

console.info("---");

console.log(Math.ceil(Math.PI / 2.0));

console.info("");

console.info("BigInt");

console.info("---");

console.log(Caml_bigint.div(BigInt(1), BigInt(12.0)));

console.info("");

console.info("Object");

console.info("---");

var myObject = {
  foo: "bar"
};

console.log(Object.create(myObject));

console.log(Object.create(myObject, {
          foo: {
            value: "bar"
          }
        }));

console.log(Object.create(null));

console.log(Object.create(null, {
          foo: {
            value: "bar"
          }
        }));

var copy = Object.assign({}, myObject);

var withNewProp = Object.assign(copy, {
      bar: "baz"
    });

console.info("");

console.info("Promise");

console.info("---");

var promise = new Promise((function (resolve, _reject) {
        setTimeout((function () {
                resolve(1);
              }), 100);
      }));

promise.then(function (x) {
            return Promise.resolve(x + 1 | 0);
          }).then(function (x) {
          return Promise.resolve(x + 2 | 0);
        }).then(function (x) {
        console.log(x);
        return Promise.resolve();
      }).finally(function () {
      console.log("Promise finally");
    });

console.info("");

console.info("RegExp");

console.info("---");

var regex = new RegExp("hello(\\w+)");

var string = "helloworld";

console.log(regex.test(string));

var result = regex.exec(string);

var result$1 = (result == null) ? undefined : Caml_option.some(result);

console.log(Core__Option.map(result$1, (function (prim) {
            return prim.input;
          })));

console.log(Core__Option.map(result$1, (function (prim) {
            return prim.index;
          })));

console.log(Core__Option.map(result$1, (function (prim) {
            return prim.slice(1);
          })));

console.info("");

console.info("Set");

console.info("---");

var set = new Set();

set.add(1);

set.add(2);

set.delete(2);

console.log(set);

console.info("");

console.info("String");

console.info("---");

var regexp = new RegExp("(hello )(world)");

console.log("   Hello world  ".toLowerCase().trim().replace(regexp, (function (param, group1, group2, param$1, param$2) {
            return group1 + group2.toUpperCase();
          })));

console.info("");

console.info("Symbol");

console.info("---");

var x = Symbol.for("Foo");

console.log(x);

var array$1 = Array.from("foo"[Symbol.iterator]());

console.log(array$1);

console.info("");

console.info("Global namespace");

console.info("---");

console.log("number");

var timeout = setTimeout((function () {
        console.log("Hello!");
      }), 100);

clearTimeout(timeout);

if (globalThis.hello !== undefined) {
  console.log(globalThis.hello.bar);
  console.log("hello");
}

var z = 1.2 % 1.4;

var intFromBigInt = Core__BigInt.toInt(BigInt("10000000000"));

console.log({
      bar: "1"
    });

var Bugfix = {};

console.log(Core__Int.fromString("1231231", undefined));

console.log(Core__Int.fromString("12.22", undefined));

console.log(Core__Int.fromString("99999999999999999", undefined));

console.log(Core__Int.fromString("99999999999999999", undefined));

console.log(Core__Int.fromString("010101", 2));

var _collator = IntlTests._collator;

var collator = IntlTests.collator;

var resolvedOptions = IntlTests.resolvedOptions;

var timeZone = IntlTests.timeZone;

var _locale = IntlTests._locale;

var locale = IntlTests.locale;

var currencyFormatter = IntlTests.currencyFormatter;

var roundingFormatter = IntlTests.roundingFormatter;

var groupingFormatter1 = IntlTests.groupingFormatter1;

var groupingFormatter2 = IntlTests.groupingFormatter2;

var sigFormatter = IntlTests.sigFormatter;

var options = IntlTests.options;

var _formatter = IntlTests._formatter;

var formatter = IntlTests.formatter;

var segments = IntlTests.segments;

exports._collator = _collator;
exports.collator = collator;
exports.resolvedOptions = resolvedOptions;
exports.timeZone = timeZone;
exports._locale = _locale;
exports.locale = locale;
exports.currencyFormatter = currencyFormatter;
exports.roundingFormatter = roundingFormatter;
exports.groupingFormatter1 = groupingFormatter1;
exports.groupingFormatter2 = groupingFormatter2;
exports.sigFormatter = sigFormatter;
exports.options = options;
exports._formatter = _formatter;
exports.formatter = formatter;
exports.segments = segments;
exports.date = date;
exports.dict = dict;
exports.dict2 = dict2;
exports.f = f;
exports.json = json;
exports.map = map;
exports.myObject = myObject;
exports.copy = copy;
exports.withNewProp = withNewProp;
exports.promise = promise;
exports.regex = regex;
exports.string = string;
exports.result = result$1;
exports.set = set;
exports.regexp = regexp;
exports.x = x;
exports.array = array$1;
exports.timeout = timeout;
exports.z = z;
exports.intFromBigInt = intFromBigInt;
exports.Bugfix = Bugfix;
/*  Not a pure module */
