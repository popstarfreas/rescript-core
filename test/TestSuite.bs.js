// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var IntTests = require("./IntTests.bs.js");
var DictTests = require("./DictTests.bs.js");
var JsonTests = require("./JsonTests.bs.js");
var TestTests = require("./TestTests.bs.js");
var ArrayTests = require("./ArrayTests.bs.js");
var ErrorTests = require("./ErrorTests.bs.js");
var FloatTests = require("./FloatTests.bs.js");
var ObjectTests = require("./ObjectTests.bs.js");
var PromiseTest = require("./PromiseTest.bs.js");
var ResultTests = require("./ResultTests.bs.js");
var IteratorTests = require("./IteratorTests.bs.js");
var NullableTests = require("./NullableTests.bs.js");
var TypedArrayTests = require("./TypedArrayTests.bs.js");

var bign = TestTests.bign;

var TestError = PromiseTest.TestError;

var fail = PromiseTest.fail;

var equal = PromiseTest.equal;

var Creation = PromiseTest.Creation;

var ThenChaining = PromiseTest.ThenChaining;

var Rejection = PromiseTest.Rejection;

var Catching = PromiseTest.Catching;

var Concurrently = PromiseTest.Concurrently;

var panicTest = ErrorTests.panicTest;

var $$catch = IntTests.$$catch;

var nums = ObjectTests.nums;

var d = ObjectTests.d;

var x = ObjectTests.x;

var mkBig = ObjectTests.mkBig;

var assignOverwritesTarget = ObjectTests.assignOverwritesTarget;

var runGetTest = ObjectTests.runGetTest;

var getSymbolTestWhenExists = ObjectTests.getSymbolTestWhenExists;

var forEachIfOkCallFunction = ResultTests.forEachIfOkCallFunction;

var forEachIfErrorDoNotCallFunction = ResultTests.forEachIfErrorDoNotCallFunction;

var num1 = TypedArrayTests.num1;

var num2 = TypedArrayTests.num2;

var num3 = TypedArrayTests.num3;

var assertTrue = TypedArrayTests.assertTrue;

var assertWillThrow = TypedArrayTests.assertWillThrow;

var areSame = TypedArrayTests.areSame;

var o = TypedArrayTests.o;

var decodeJsonTest = JsonTests.decodeJsonTest;

var shouldHandleNullableValues = NullableTests.shouldHandleNullableValues;

var eq = IteratorTests.eq;

var iterator = IteratorTests.iterator;

var syncResult = IteratorTests.syncResult;

var asyncResult = IteratorTests.asyncResult;

var asyncIterator = IteratorTests.asyncIterator;

exports.bign = bign;
exports.TestError = TestError;
exports.fail = fail;
exports.equal = equal;
exports.Creation = Creation;
exports.ThenChaining = ThenChaining;
exports.Rejection = Rejection;
exports.Catching = Catching;
exports.Concurrently = Concurrently;
exports.panicTest = panicTest;
exports.$$catch = $$catch;
exports.nums = nums;
exports.d = d;
exports.x = x;
exports.mkBig = mkBig;
exports.assignOverwritesTarget = assignOverwritesTarget;
exports.runGetTest = runGetTest;
exports.getSymbolTestWhenExists = getSymbolTestWhenExists;
exports.forEachIfOkCallFunction = forEachIfOkCallFunction;
exports.forEachIfErrorDoNotCallFunction = forEachIfErrorDoNotCallFunction;
exports.num1 = num1;
exports.num2 = num2;
exports.num3 = num3;
exports.assertTrue = assertTrue;
exports.assertWillThrow = assertWillThrow;
exports.areSame = areSame;
exports.o = o;
exports.decodeJsonTest = decodeJsonTest;
exports.shouldHandleNullableValues = shouldHandleNullableValues;
exports.eq = eq;
exports.iterator = iterator;
exports.syncResult = syncResult;
exports.asyncResult = asyncResult;
exports.asyncIterator = asyncIterator;
/* IntTests Not a pure module */
