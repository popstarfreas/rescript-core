// Generated by ReScript, PLEASE EDIT WITH CARE

import * as IntTests from "./IntTests.bs.js";
import * as DictTests from "./DictTests.bs.js";
import * as JsonTests from "./JsonTests.bs.js";
import * as TestTests from "./TestTests.bs.js";
import * as ArrayTests from "./ArrayTests.bs.js";
import * as ErrorTests from "./ErrorTests.bs.js";
import * as FloatTests from "./FloatTests.bs.js";
import * as ObjectTests from "./ObjectTests.bs.js";
import * as PromiseTest from "./PromiseTest.bs.js";
import * as ResultTests from "./ResultTests.bs.js";
import * as IteratorTests from "./IteratorTests.bs.js";
import * as NullableTests from "./NullableTests.bs.js";
import * as TypedArrayTests from "./TypedArrayTests.bs.js";

var bign = TestTests.bign;

var TestError = PromiseTest.TestError;

var fail = PromiseTest.fail;

var equal = PromiseTest.equal;

var Creation = PromiseTest.Creation;

var ThenChaining = PromiseTest.ThenChaining;

var Rejection = PromiseTest.Rejection;

var Catching = PromiseTest.Catching;

var Concurrently = PromiseTest.Concurrently;

var panicTest = ErrorTests.panicTest;

var $$catch = IntTests.$$catch;

var nums = ObjectTests.nums;

var d = ObjectTests.d;

var x = ObjectTests.x;

var mkBig = ObjectTests.mkBig;

var assignOverwritesTarget = ObjectTests.assignOverwritesTarget;

var runGetTest = ObjectTests.runGetTest;

var getSymbolTestWhenExists = ObjectTests.getSymbolTestWhenExists;

var forEachIfOkCallFunction = ResultTests.forEachIfOkCallFunction;

var forEachIfErrorDoNotCallFunction = ResultTests.forEachIfErrorDoNotCallFunction;

var num1 = TypedArrayTests.num1;

var num2 = TypedArrayTests.num2;

var num3 = TypedArrayTests.num3;

var assertTrue = TypedArrayTests.assertTrue;

var assertWillThrow = TypedArrayTests.assertWillThrow;

var areSame = TypedArrayTests.areSame;

var o = TypedArrayTests.o;

var decodeJsonTest = JsonTests.decodeJsonTest;

var shouldHandleNullableValues = NullableTests.shouldHandleNullableValues;

var eq = IteratorTests.eq;

var iterator = IteratorTests.iterator;

var syncResult = IteratorTests.syncResult;

var asyncResult = IteratorTests.asyncResult;

var asyncIterator = IteratorTests.asyncIterator;

export {
  bign ,
  TestError ,
  fail ,
  equal ,
  Creation ,
  ThenChaining ,
  Rejection ,
  Catching ,
  Concurrently ,
  panicTest ,
  $$catch ,
  nums ,
  d ,
  x ,
  mkBig ,
  assignOverwritesTarget ,
  runGetTest ,
  getSymbolTestWhenExists ,
  forEachIfOkCallFunction ,
  forEachIfErrorDoNotCallFunction ,
  num1 ,
  num2 ,
  num3 ,
  assertTrue ,
  assertWillThrow ,
  areSame ,
  o ,
  decodeJsonTest ,
  shouldHandleNullableValues ,
  eq ,
  iterator ,
  syncResult ,
  asyncResult ,
  asyncIterator ,
}
/* IntTests Not a pure module */
